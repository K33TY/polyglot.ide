<!--
  This is the Apache Ant build file for Polyglot IDE.

  Targets are public (i.e., intended to be callable by the user) if and only if
  they have a description attribute.  Public targets will show up when the user
  runs "ant -p".  Internal targets should not have description attributes!
-->
<project name="polyglot-ide" default="compile" basedir=".">
  <description>
    Polyglot IDE build file
  </description>

  <dirname property="polyglot-ide.home" file="${ant.file.polyglot-ide}" />
  <property file="${polyglot-ide.home}/config.properties"/>

  <!-- Source directory -->
  <property name="src" location="${polyglot-ide.home}/src"/>

  <!-- Directory for class files -->
  <property name="classes" location="${polyglot-ide.home}/classes"/>

  <!--
       Polyglot location

       If polyglot.home is not defined in the properties file, try
       ${polyglot-ide.home}/../polyglot
  -->
  <condition property="polyglot.home" value="${polyglot-ide.home}/../polyglot">
    <not><isset property="polyglot.home"/></not>
  </condition>

  <!--
       Eclipse location

       If eclipse.home is not defined in the properties file, try
       /usr/lib/eclipse.
  -->
  <condition property="eclipse.home" value="/usr/lib/eclipse">
    <not><isset property="eclipse.home"/></not>
  </condition>

  <!-- Polyglot classpath -->
  <path id="polyglot.classpath">
    <pathelement path="${polyglot.home}/classes"/>
    <pathelement path="${polyglot.home}/lib/polyglot.jar"/>
    <pathelement path="${polyglot.home}/lib/ppg.jar"/>
    <pathelement path="${polyglot.home}/lib/java_cup.jar"/>
    <pathelement path="${polyglot.home}/lib/jflex.jar"/>
  </path>

  <!-- Eclipse plugins classpath -->
  <path id="eclipse.classpath">
    <fileset dir="${eclipse.home}/plugins">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <!--
  ****************************************************************************
    Configuration targets.
  ****************************************************************************
  -->

  <!-- Main configuration target. -->
  <target name="configure"
      description="Configures Polyglot IDE"
      depends="configure-buildstring,config.properties"
      unless="configured">
    <echo message="Polyglot home directory is ${polyglot.home}"/>
    <echo message="Eclipse home directory is ${eclipse.home}"/>
    <echo message="Polyglot IDE version is ${polyglot-ide.version.build}"/>

    <!--
    ________________________________________________________________________
    Check configuration.
    -->

    <property file="${polyglot-ide.home}/config.properties" prefix="config"/>

    <!-- Check for presence of Polyglot. -->
    <condition property="polyglot.exists" value="true">
      <available classname="polyglot.main.Version"
          classpathref="polyglot.classpath"/>
    </condition>

    <!-- Error handling: Polyglot not found and polyglot.home not set. -->
    <fail message="Failed to find Polyglot. Edit 'config.properties' and set the 'polyglot.home' property, and make sure Polyglot is built.">
      <condition>
        <and>
          <isfalse value="${polyglot.exists}"/>
          <not><isset property="config.polyglot.home"/></not>
        </and>
      </condition>
    </fail>

    <!-- Error handling: Polyglot not found. -->
    <fail message="Failed to find Polyglot. Ensure the 'polyglot.home' property is correct in 'config.properties' and make sure Polyglot is built.">
      <condition>
        <isfalse value="${polyglot.exists}"/>
      </condition>
    </fail>

    <!-- Check for presence of Eclipse. -->
    <condition property="eclipse.exists" value="true">
      <available file="${eclipse.home}/plugins" type="dir"/>
    </condition>

    <!-- Error handling: Eclipse not found and eclipse.home not set. -->
    <fail message="Failed to find Eclipse. Edit 'config.properties' and set the 'eclipse.home' property.">
      <condition>
        <and>
          <isfalse value="${eclipse.exists}"/>
          <not><isset property="config.eclipse.home"/></not>
        </and>
      </condition>
    </fail>

    <!-- Error handling: Eclipse not found. -->
    <fail message="Failed to find Eclipse. Ensure the 'eclipse.home' property is correct in 'config.properties'.">
      <condition>
        <isfalse value="${eclipse.exists}"/>
      </condition>
    </fail>

    <property name="configured" value="true"/>
  </target>

  <!-- Configures Eclipse's .classpath file. -->
  <target name="eclipse" depends="eclipse-check"
      unless="eclipse.up-to-date"
      description="Configures Eclipse's .classpath file">
    <copy file="eclipse-classpath.in" tofile=".classpath"/>
  </target>

  <!--
  ____________________________________________________________________________
    Configuration helper targets.
  -->

  <!-- Ensures config.properties exists. -->
  <target name="config.properties" depends="config.properties-check"
      unless="config.properties.exists">
    <copy file="config.properties.in" tofile="config.properties"/>
  </target>

  <target name="configure-buildstring" depends="configure-version"
      unless="polyglot-ide.version.build">
    <tstamp>
      <format property="now" timezone="America/New_York"
          pattern="yyyy-MM-dd HH:mm:ss z"/>
    </tstamp>
    <property name="polyglot-ide.version.build"
        value="${polyglot-ide.version} (${now})"/>
  </target>

  <target name="configure-version" unless="polyglot-ide.version">
    <property file="${polyglot-ide.home}/version.properties"
        prefix="polyglot-ide"/>
    <property name="polyglot-ide.version"
        value="${polyglot-ide.version.major}.${polyglot-ide.version.minor}.${polyglot-ide.version.patch}"/>
  </target>

  <target name="config.properties-check">
    <condition property="config.properties.exists" value="true">
      <resourceexists>
        <file file="config.properties"/>
      </resourceexists>
    </condition>
  </target>

  <target name="eclipse-check">
    <uptodate property="eclipse.up-to-date" targetfile=".classpath"
        srcfile="eclipse-classpath.in"/>
  </target>

  <!--
  ****************************************************************************
    Targets for cleaning up the directory tree.
  ****************************************************************************
  -->

  <target name="clean" description="Cleans up the directory tree">
    <delete dir="${classes}"/>
  </target>

  <target name="clobber"
      depends="clean"
      description="Cleans up the directory tree"/>

  <!--
  ****************************************************************************
    Compilation targets.
  ****************************************************************************
  -->

  <!-- Main target for compiling Polyglot IDE -->
  <target name="compile"
      depends="init,eclipse"
      description="Compile the plugin">
    <javac source="1.7"
        target="1.7"
        debug="on"
        srcdir="${src}"
        destdir="${classes}"
        includeAntRuntime="false">
      <include name="**/*.java"/>
      <sourcepath path="${src}"/>
      <classpath>
        <path refid="polyglot.classpath"/>
        <path refid="eclipse.classpath"/>
      </classpath>
    </javac>
  </target>

  <!--
  ____________________________________________________________________________
    Compilation helper targets.
  -->

  <!-- Initializes the build -->
  <target name="init" depends="configure">
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${classes}"/>
  </target>

  <!--
  ****************************************************************************
    Version-management targets
  ****************************************************************************
  -->

  <target name="bump-version">
    <antcall target="bump-patch"/>
  </target>

  <target name="bump-major">
    <propertyfile file="${polyglot-ide.home}/version.properties">
      <entry key="version.major" type="int" operation="+" value="1"
          pattern="0"/>
      <entry key="version.minor" type="int" value="0"/>
      <entry key="version.patch" type="int" value="0"/>
    </propertyfile>

    <!-- Regenerate version files -->
    <antcall target="gen-version"/>
  </target>

  <target name="bump-minor">
    <propertyfile file="${polyglot-ide.home}/version.properties">
      <entry key="version.minor" type="int" operation="+" value="1"
          pattern="0"/>
      <entry key="version.patch" type="int" value="0"/>
    </propertyfile>

    <!-- Regenerate version files -->
    <antcall target="configure-buildstring" />
    <antcall target="gen-version"/>
  </target>

  <target name="bump-patch">
    <propertyfile file="${polyglot-ide.home}/version.properties">
      <entry key="version.patch" type="int" operation="+" value="1"
          pattern="0"/>
    </propertyfile>

    <!-- Regenerate version files -->
    <antcall target="gen-version"/>
  </target>

  <!--
  ____________________________________________________________________________
    Version-management helper targets.
  -->

  <!-- Generates version files in the source tree. -->
  <target name="gen-version" depends="configure-buildstring">
    <manifest file="${polyglot-ide.home}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version"
          value="${polyglot-ide.version.major}.${polyglot-ide.version.minor}.${polyglot-ide.version.patch}"/>
    </manifest>
  </target>
</project>
<!--
vim: ts=2 sw=2 ai et
-->
